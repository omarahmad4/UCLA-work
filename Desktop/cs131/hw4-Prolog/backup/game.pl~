/*
This is a little adventure game. There are three
entities: you, a treasure, and an ogre. There are
pix placep: a valleyr a path, a cliff, a fork, a mage?,
and a mounLaintop * Your goal is Lo get Lhe treasure
without being killed first .,
*/
/*
First text descriptions of all the places in
the game
*/
description(valley,
            'You are in a pleasant valley, with a trail ahead.').
description(path,
            'You are on a path, with ravines on both sides.').
description(cliff,
            'You are teetering on the edge of a cliff.'). 
description(fork,
            'You are at a fork in the path.').
description(maze(_),
            'You are in a maze of twisty trails, all alike.').
description(mountaintop,
            'You are on the mountaintop.').

/*
report prints the description of your current
location.
*/

report :-
at(you,X),
description(X,Y),
write(Y), nl.

/*
These connect predicates establish the map.
The meaning of connect(X,Dir,Â¥} is that if you
are at X and you move in direction Dir, you
get to Y. Recognised directions are
forward, right 4 and left,
*/
connect(valley, forward , path).
connect(path,right,cliff).
connect(path,left,cliff).
connect(path, forward, fork).
connect(fork, left, maze(0)).
connect(fork, right, mountaintop).
connect(maze(0), left, maze(1)).
connect(maze(0), right, maze(3)).
connect(maze(l), left, maze(0)).
connect(maze(l), right, maze(2)).
connect(maze(2), left, fork ).
connect(maze(2), right, maze(0)).
connect(maze(3), left, maze(0)).
connect(maze(3), right, maze(3)).



/*
move(Dir) moves you in direction Dir, then
prints the description of your new location,
*/
move(Dir) :-
at(you,Loc),
connect(Loc,Dir,Next),
retract(at(you, Loc)),
assert(at(you, Next)),
report,
!.

/*
But if the argument was not a legal direction *
print an error message and dont move.
*/

move(_) :-
write('That is not a legal move.\n'),
report.

/*
Shorthand for moves.
*/
forward :- move(forward).
left :- move(left).
right :- move(right).

/*
I f you and the ogre are at the same place, it
kills you.
*/
ogre :-
at(ogre, Loc ) ,
at(you , Loc ) ,
write('An ogre sucks your brain out through\n' ),
write('your eye sockets, and you die.\n' ),
retract(at(you, Loc)),
assert(at(you, done)),
!.

/*
But if you and the ogre are not in the same place,
nothing happens.
*/
ogre.



/*
If you and the treasure are at the same place, you
win.
*/
treasure :-
at(treasure , Loc ) ,
at( you , Loc ) ,
write( 'Ther is a treasure here.\n ' ) ,
write( 'Congratulations , you win!\n ' ) ,
retract(at(you,Loc) ) ,
assert(at(you , done) ) ,
! .
/*
But i f you and the t reasure are not in the same
place, nothing happens .
*/
treasure.

/*
If you are at the cliff , you fall off and die.
*/
cliff :- 
at(you ,cliff) ,
write('You fall off and die. \n ' ) ,
retract(at( you , cliff) ) ,
assert(at( you, done ) ) ,
!.

/*
But i f you are not at the cl i f f nothing happens .
*/
cliff .

/* main loop
1st if player won or lost
2nd for not done yet
*/
main :-
at(you,done),
write('Thanks for playing. \n'),
!.

main :-
write('\nNext move - '),
read(Move),
call(Move),
ogre,
treasure,
cliff,
main.

/*
This Is the starting point for the gacne . We
assert the initial conditions , print an initial
report ; then start the main loop .
*/
go :-
retractall(at(_,_)),                 % clean up from previous runs
assert(at(you , valley) ) ,
assert(at(ogre ,maze(3) ) ) ,
assert(at(treasure, mountaintop ) ) ,
write( 'This Is an adventure game. \n' ) ,
write( 'Legal moves are left, right, or forward.\n' ) ,
write( 'End each move with a period. \n\n ' ),
report ,
main.

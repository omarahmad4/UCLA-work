#!/usr/bin/python
import random, sys
from optparse import OptionParser
#from argparse import ArgumentParser

#print sys.getrecursionlimit()

#class randline:
#    def __init__(self, filename):
#        f = open(filename, 'r')
#        self.lines = f.readlines()
#        f.close()

#    def chooseline(self):
#        return random.choice(self.lines)

def main():
    version_msg = "%prog 2.0"
    usage_msg = """%prog [OPTION]...[FILE]

Output all lines from file(or stdin) in random order."""

#    myparser = ArgumentParser(version=version_msg,usage=usage_msg)
    parser = OptionParser(version=version_msg,
                          usage=usage_msg)
    
#    parser.add_option("-x", "--numlines",
#                      action="store", dest="numlines", default=1,
#                      help="output NUMLINES lines (default 1)")
#    parser.add_option("-",
#                      action = "store_true",
#                      dest = "stdinput",
#                      default = False)
    parser.add_option("-r", "--repeat",
                      action="store_false",
                      dest="repeat",
                      default = True)
    parser.add_option("-i", "--input-range=LO-HI",
                      action="store",
                      dest="inputrange",
                      help="treach each number LO through HI as an input line")
    parser.add_option("-n", "--head-count",
                      help="output at most HEADCOUNT lines",
                      dest="headcount")
#    parser.add_option("--help",
#                      action="store_true",
#                      dest="helpwanted",
#                      default=False)
    
    options, args = parser.parse_args(sys.argv[1:])

    repeat=options.repeat
#    headcount=options.headcount
   # print repeat
   # print options.repeat
    isheadcount = False
    try:
        headcount=int(options.headcount)
        if headcount < 0:
           raise ValueError()
        if headcount == 0:
            return None
        isheadcount = True
    except:
        if options.headcount is not None:
            parser.error("invalid line count: '" + str(options.headcount) + "'")

    isinputrange = False
    try:
        inputrange=str(options.inputrange)
        Range=inputrange.split("-")
        if len(Range)!=2:
            raise ValueError()
        LowLimit=int(Range[0])
        HighLimit=int(Range[1])
        
        if LowLimit>HighLimit:
            raise ValueError()
        isinputrange = True
    except:
        if options.inputrange is not None:
            parser.error("invalid input range: " + str(options.inputrange))

   #    print "num args:" + str(len(args))

    if len(args) == 1:
        if args[0] == "-":
            lines = sys.stdin.readlines()
        else:
#            input_file = args[0]
            lines = open(args[0]).readlines()
    elif len(args)==0:
        if not isinputrange:
            lines = sys.stdin.readlines()
        #add stdin option here with if i not NONE
        else:
            lines = []
            for x in range(LowLimit, HighLimit+1):
                lines.append(str(x)+"\n")
#        print lines
       # print "testAAAAAAAAAAA"
        
    #add range of nums to input_file as a file not list :(
    else:
        parser.error("extra operand '" + str(args[1]) + "'")
#        for 
#        input_file = 
        
#CHECK TOOOOOOO MANY ARGS????

        

#    with open(input_file) as f
#         content = f.readlines()
#    sys.stdout.write(content)
#    f = open(input_file, "r")
#    lines = f.readlines()
#    f.close()
#    f = open(input_file, "w")
#    for line in lines:
#        if line!="c":
#            f.write(line)
#    f.close()
#    sys.stdout.write(lines[3])
#    for i in range(len(lines)):
#         sys.stdout.write(lines[i])
#    for line in lines:
#        abc = line
#        sys.stdout.write(line)

  #  try:
  #      generator = randline(input_file)
#        for index in range(numlines):
#            chosenline=(generator.chooseline())
 #           sys.stdout.write(chosenline)
            #sys.stdout.write(chosenline+"zzzzz\n")
#            with open(input_file,"r") as input:
#                with open("new","wb") as output: 
#                    for line in input:
#                        if line!=chosenline:
#                            pass
                           # output.write(line)#if use this method should delete newfile at end of script!
            
 #   except IOError as (errno, strerror):
 #       parser.error("I/O error({0}): {1}".
 #                    format(errno, strerror))

    def output1line(n):
        index=0
        if isheadcount:
            index=len(n)-headcount
            #        a = random.randint(0, len(n)-1)
        while len(n)>index:
#        while i < len
            try:
                a = random.randint(0, len(n)-1)
            except:
                return None
            for x in range(len(n)):
                if x == a:
                    sys.stdout.write(n[a])
                    if repeat:
                        n.remove(n[a])
                    elif isheadcount:
                        index = index + 1
                    
               
        # print "len(n) = " + str(len(n))
   #     if len(n)==0:
   #         return None
   #     a = random.randint(0, len(n)-1)
   #     sys.stdout.write(n[a])
       # print(n[a])
       # print repeat
    #    if repeat:
    #        n.remove(n[a])
    #    output1line(n)
        
    output1line(lines)
    
if __name__ == "__main__":
    main()

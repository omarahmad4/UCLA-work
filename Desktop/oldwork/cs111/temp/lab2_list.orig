//NAME: Omar Ahmad
//EMAIL: omarahmad4@ucla.edu
//ID: 804801272

#include <stdio.h>

#include <unistd.h>
#include <stdlib.h>
#include <getopt.h>
#include <errno.h>
#include <string.h>
#include <pthread.h>
#include <time.h> //for clock
#include <signal.h>
#include "SortedList.h"

//#include <termios.h>
//#include <poll.h>

//#include <sys/wait.h>

struct SortedListElement myList;  //shared by all threads
struct SortedListElement * elements;  //shared by all threads

int errno, iterations, opt_yield;
int isMutex = 0;
long numLockOps = 0;
long long counter = 0;
long long * threadTimes;
pthread_mutex_t Mex;
volatile int spinLock = 0;


struct threadData
{
  int size;
  int threadNum;
  struct SortedListElement * tElements;
  char * tSync;
};

void sigHandle()
{
  fprintf(stderr, "Found corrupted list\n");
  exit(2);
}

void errorExit(char errmsg[], int code, int doErrno)
{
  if(doErrno)
    fprintf(stderr, "Error: %s\nErrno: %s\tExiting...\n", errmsg, strerror(errno));
  else
    fprintf(stderr, "Error: %s\nExiting...\n", errmsg);  
  if(code)
    exit(code);
}

long long calcTime(struct timespec start, struct timespec end)
{
  return 1000000000*(end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec;
}


void* threadFunc(void* Data)
{
  struct threadData tData = *(struct threadData *) Data;
  struct SortedListElement * elements = tData.tElements;
  struct timespec start_t, end_t; 
  int numElem = tData.size;
  int tNum = tData.threadNum;
  char sync = *tData.tSync;
  int j;
  switch (sync)
    {
    case 'm': //mutex
      for(j = 0; j < numElem; j++) //inserting
	{
	  clock_gettime(CLOCK_MONOTONIC, &start_t); //timing how long to get lcck
	  pthread_mutex_lock(&Mex);
  	  clock_gettime(CLOCK_MONOTONIC, &end_t);
 	  SortedList_insert(&myList, &elements[j]);
	  pthread_mutex_unlock(&Mex);
	  numLockOps ++;
	  threadTimes[tNum] += calcTime(start_t, end_t);
	}
      clock_gettime(CLOCK_MONOTONIC, &start_t);
      pthread_mutex_lock(&Mex);
      clock_gettime(CLOCK_MONOTONIC, &end_t);
      SortedList_length(&myList);   //length
      pthread_mutex_unlock(&Mex);
      numLockOps ++;
      threadTimes[tNum] += calcTime(start_t, end_t);
      for(j = 0; j < numElem; j++)  //lookup and delete
	{
  	  clock_gettime(CLOCK_MONOTONIC, &start_t);
     	  pthread_mutex_lock(&Mex);
  	  clock_gettime(CLOCK_MONOTONIC, &end_t);
	  SortedListElement_t * tempPtr = SortedList_lookup(&myList, elements[j].key);
	  if(tempPtr == NULL)
	    {
	      errorExit("Lookup failed!", 2, 0); //2 for failure on synch
	    }
	  SortedList_delete(tempPtr); //delete the looked up elmt
      	  pthread_mutex_unlock(&Mex);
	  numLockOps++;
	  threadTimes[tNum] += calcTime(start_t, end_t);
	}
      break;
      
    case 's': //spin lock
      for(j = 0; j < numElem; j++)
	{
	  clock_gettime(CLOCK_MONOTONIC, &start_t);
	  while(__sync_lock_test_and_set(&spinLock, 1))
	    {
	      clock_gettime(CLOCK_MONOTONIC, &end_t);
	      printf("TEST \n");
	      SortedList_insert(&myList, &elements[j]);
	    }
	  __sync_lock_release(&spinLock);
	  numLockOps++;
	  threadTimes[tNum] += calcTime(start_t, end_t);
	}
      clock_gettime(CLOCK_MONOTONIC, &start_t);
      while(__sync_lock_test_and_set(&spinLock, 1))
	{
	  clock_gettime(CLOCK_MONOTONIC, &end_t);
	  SortedList_length(&myList);
	}
      __sync_lock_release(&spinLock);
      numLockOps++;
      threadTimes[tNum] += calcTime(start_t, end_t);
      for(j = 0; j < numElem; j++)
	{
	  clock_gettime(CLOCK_MONOTONIC, &start_t);
	  while(__sync_lock_test_and_set(&spinLock, 1))
	    {
	      clock_gettime(CLOCK_MONOTONIC, &end_t);
	      SortedListElement_t * tempPtr = SortedList_lookup(&myList, elements[j].key);
	      if(tempPtr == NULL)
		{
		  errorExit("Lookup failed!", 2, 0); //2 for failure on synch
		}
	      SortedList_delete(tempPtr); //delete the looked up elmt
	    }
	  __sync_lock_release(&spinLock);
	  numLockOps++;
	  threadTimes[tNum] += calcTime(start_t, end_t); //add times after releasing to not delay releasing
	}
      break;
      
    case 'z': //no lock
    default:
      for(j = 0; j < numElem; j++)
	{
	  SortedList_insert(&myList, &elements[j]);
	}
      SortedList_length(&myList);
      for(j = 0; j < numElem; j++)
	{
	  SortedListElement_t * tempPtr = SortedList_lookup(&myList, elements[j].key);
	  if(tempPtr == NULL)
	    {
	      errorExit("Lookup failed!", 2, 0); //2 for failure on synch
	    }
	  SortedList_delete(tempPtr); //delete the looked up elmt
	}
      break;
    }
  
  return 0;
}


int main (int argc, char **argv)
{
  static struct option optData[] =
    {
     {"threads",required_argument, NULL, 't'},
     {"iterations",required_argument, NULL, 'i'}, //I bc i used as iterator
     {"yield", required_argument, NULL, 'y'}, //I bc i used as iterator
     {"sync",required_argument, NULL, 's'}, //I bc i used as iterator
     {      0, 0,    0,   0}
    };

  signal(SIGSEGV, sigHandle);
    
  int option;
  int numThreads; //, iterations;
  numThreads = 1;
  iterations = 1;
  char sync = 'z';
  char * yield;

  int isArg = 1;
  while (isArg)
    {
      option = getopt_long(argc, argv, "t:i:s:", optData, NULL);
      switch(option)
	{
	case 't':
	  numThreads = atoi(optarg);
	  if(numThreads <  1)
	    errorExit("Must input positive number of threads!", 1, 1);
	  break;
	case 'i':
	  iterations = atoi(optarg);
	  if(iterations < 1)
	    errorExit("Must input positive number of iterations!", 1, 1);
	  break;
	case 'y':
	  if(strlen(optarg) > 3)
	    errorExit("Yield takes any combination of i, d, and l", 1, 0); 
	  opt_yield = 1;
	  yield = optarg;
	  break;
	case 's':
	  if(strlen(optarg) == 1 && (optarg[0] == 'm' || optarg[0] == 's')) // || optarg[0] == 'c'))
	    sync = optarg[0];
	  else
	    errorExit("Sync takes 'm' or 's'", 1, 0);
	  break;
	case -1:
	  isArg = 0;
	  break;
	default:
	  errorExit("Usage: ./lab2-add [--threads=NUMTHREADS] [--iterations=NUMITERATIONS] [--yield=(idl)] [--sync=(m|s)]", 1, 0);
	  break;
	}
    }

  int i;
  int yieldI = 0;
  int yieldD = 0;
  int yieldL = 0;
  if(opt_yield)
    for(i = 0; i < (int)strlen(yield); i++)
      {
	switch (yield[i])
	  {
	  case 'i':
	    yieldI = 1;
	    break;
	  case 'd':
	    yieldD = 1;
	    break;
	  case 'l':
	    yieldL = 1;
	    break;
	  }
      }  

  int size = numThreads*iterations;
  //struct SortedListElement elements [size];

  if(sync == 'm')
    {
      isMutex=1;
      pthread_mutex_init(&Mex, NULL); //moved up here bc mutexes weren't working :(
    }


  myList = *(SortedList_t *)malloc(sizeof(SortedList_t));
  myList.key = NULL;
  myList.next = &myList;
  myList.prev = &myList;
  elements = (SortedListElement_t*) malloc(size*sizeof(SortedListElement_t)); //must malloc bc c 

  char randChar;
  for(i = 0; i < size; i++)
    {
      randChar = rand();
      elements[i].key = &randChar;
    }

  struct threadData tData; //Data structure init to pass to threads
  tData.size = size;
  tData.tElements = elements;
  tData.tSync = &sync;


  threadTimes = malloc(sizeof(long long) * numThreads);
  memset(threadTimes, 0, sizeof(long long) * numThreads);
  
  struct timespec start, end;
  if(clock_gettime(CLOCK_MONOTONIC, &start) < 0)
    errorExit("Error wih clock_gettime", 1 ,1);

  pthread_t  threads[numThreads];

  switch(sync)
    {
    case 'm':
      //      pthread_mutex_init(&Mex, NULL);
      for(i = 0; i < numThreads; i++)
	{
	  tData.threadNum = i;
	  pthread_create(&threads[i], NULL, &threadFunc, (void *) &tData);
	}
      for(i = 0; i < numThreads; i++)
	pthread_join(threads[i], NULL);
      pthread_mutex_destroy(&Mex);
      break;
    case 's':
    default:
      for(i = 0; i < numThreads; i++)
	{
	  tData.threadNum = i;
	  if (pthread_create(&threads[i], NULL, &threadFunc, (void *) &tData))
	    errorExit("creating threads", 1, 0);
	}
      for(i = 0; i < numThreads; i++)
	if (pthread_join(threads[i], NULL))
	  errorExit("joining threads", 1, 0);
      break;
    }  

  if(clock_gettime(CLOCK_MONOTONIC, &end) < 0)
    errorExit("Error wih clock_gettime", 1 ,1);

  // CHECKS THE LENGTH OF THE LIST CONFIRMING IT IS ZERO

  
  long long startT = start.tv_sec*1000000000 +  start.tv_nsec;
  long long endT = end.tv_sec*1000000000 + end.tv_nsec;
  long long totalTime = endT - startT;
    

  int len = SortedList_length(&myList);
  if(len != 0)
    {
      fprintf(stderr, "List length not equal to zero\n");
      exit(2);
    }



  long int operations = numThreads*iterations*3;
  char  msg [100];
  char  buf  [50];
  strcpy(msg, "list");
  if(opt_yield)
    {
      //    char * I = "i";
      //char * D = "d";
      //char * L = "l";
      strcat(msg, "-");
      if(yieldI)
	strcat(msg, "i");
      if(yieldD)
	strcat(msg, "d");
      if(yieldL)
	strcat(msg, "l");
    }
  else
    {
      strcpy(buf, "-none");
      strcat(msg, buf);
    }

  
  memset(buf, 0, strlen(buf));
  switch(sync)
    {
    case 'm':
      strcpy(buf, "-m");
      strcat(msg, buf);
      break;
    case 's':
      strcpy(buf, "-s");
      strcat(msg, buf);
      break;
    case 'z':
    default:
      strcpy(buf, "-none");
      strcat(msg, buf);
      break;
    }


  long long threadTime = 0;
  for(i = 0; i < numThreads; i++)
    threadTime += threadTimes[i];
  long long aveWaitForLock;
  if(sync == 's' || sync == 'm')
    aveWaitForLock = threadTime/numLockOps;
  else
     aveWaitForLock = 0;
  printf("%s,%i,%i,%i,%li,%lli,%lli,%lli\n", msg, numThreads, iterations, 1, operations, totalTime, totalTime/operations, aveWaitForLock);    


  //  free(elements);
  //  free(&myList);
  return 0;
}
